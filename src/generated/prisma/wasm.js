
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  email: 'email',
  contrase単a: 'contrase単a',
  rol: 'rol',
  telefono: 'telefono',
  fechaNacimiento: 'fechaNacimiento',
  fechaCreacion: 'fechaCreacion',
  ultimaActividad: 'ultimaActividad',
  activo: 'activo'
};

exports.Prisma.EspecialidadScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  activa: 'activa'
};

exports.Prisma.MedicoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  especialidadId: 'especialidadId',
  licencia: 'licencia',
  horarioInicio: 'horarioInicio',
  horarioFin: 'horarioFin'
};

exports.Prisma.CitaScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  hora: 'hora',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  sintomas: 'sintomas',
  notas: 'notas',
  tipo: 'tipo',
  estado: 'estado',
  prioridad: 'prioridad',
  fechaCreacion: 'fechaCreacion',
  fechaActualizacion: 'fechaActualizacion'
};

exports.Prisma.HistoriaClinicaScalarFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  fecha: 'fecha',
  diagnostico: 'diagnostico',
  sintomas: 'sintomas',
  tratamiento: 'tratamiento',
  medicamentos: 'medicamentos',
  alergias: 'alergias',
  signosVitales: 'signosVitales',
  observaciones: 'observaciones',
  proximaRevision: 'proximaRevision',
  estado: 'estado',
  fechaActualizacion: 'fechaActualizacion'
};

exports.Prisma.ConversacionScalarFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  asunto: 'asunto',
  estado: 'estado',
  fechaCreacion: 'fechaCreacion',
  ultimaActividad: 'ultimaActividad'
};

exports.Prisma.MensajeScalarFieldEnum = {
  id: 'id',
  conversacionId: 'conversacionId',
  remitenteId: 'remitenteId',
  destinatarioId: 'destinatarioId',
  contenido: 'contenido',
  fecha: 'fecha',
  leido: 'leido',
  tipoRemitente: 'tipoRemitente'
};

exports.Prisma.AuditoriaScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  fecha: 'fecha',
  accion: 'accion',
  detalles: 'detalles',
  ip: 'ip'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UsuarioOrderByRelevanceFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  email: 'email',
  contrase単a: 'contrase単a',
  rol: 'rol',
  telefono: 'telefono'
};

exports.Prisma.EspecialidadOrderByRelevanceFieldEnum = {
  id: 'id',
  nombre: 'nombre'
};

exports.Prisma.MedicoOrderByRelevanceFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  especialidadId: 'especialidadId',
  licencia: 'licencia',
  horarioInicio: 'horarioInicio',
  horarioFin: 'horarioFin'
};

exports.Prisma.CitaOrderByRelevanceFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  sintomas: 'sintomas',
  notas: 'notas'
};

exports.Prisma.HistoriaClinicaOrderByRelevanceFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  diagnostico: 'diagnostico',
  sintomas: 'sintomas',
  tratamiento: 'tratamiento',
  medicamentos: 'medicamentos',
  alergias: 'alergias',
  signosVitales: 'signosVitales',
  observaciones: 'observaciones',
  estado: 'estado'
};

exports.Prisma.ConversacionOrderByRelevanceFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  medicoId: 'medicoId',
  asunto: 'asunto',
  estado: 'estado'
};

exports.Prisma.MensajeOrderByRelevanceFieldEnum = {
  id: 'id',
  conversacionId: 'conversacionId',
  remitenteId: 'remitenteId',
  destinatarioId: 'destinatarioId',
  contenido: 'contenido',
  tipoRemitente: 'tipoRemitente'
};

exports.Prisma.AuditoriaOrderByRelevanceFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  accion: 'accion',
  detalles: 'detalles',
  ip: 'ip'
};
exports.TipoCita = exports.$Enums.TipoCita = {
  CONSULTA: 'CONSULTA',
  SEGUIMIENTO: 'SEGUIMIENTO',
  EMERGENCIA: 'EMERGENCIA',
  ESPECIALISTA: 'ESPECIALISTA',
  CHEQUEO: 'CHEQUEO'
};

exports.EstadoCita = exports.$Enums.EstadoCita = {
  PROGRAMADA: 'PROGRAMADA',
  CONFIRMADA: 'CONFIRMADA',
  EN_PROGRESO: 'EN_PROGRESO',
  COMPLETADA: 'COMPLETADA',
  CANCELADA: 'CANCELADA',
  NO_ASISTIO: 'NO_ASISTIO'
};

exports.PrioridadCita = exports.$Enums.PrioridadCita = {
  BAJA: 'BAJA',
  NORMAL: 'NORMAL',
  ALTA: 'ALTA',
  URGENTE: 'URGENTE'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Especialidad: 'Especialidad',
  Medico: 'Medico',
  Cita: 'Cita',
  HistoriaClinica: 'HistoriaClinica',
  Conversacion: 'Conversacion',
  Mensaje: 'Mensaje',
  Auditoria: 'Auditoria'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
